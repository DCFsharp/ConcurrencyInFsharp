<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>ImagePipeline</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ImagePipeline.BlockingQgent">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:ImagePipeline.Extensions.GaussianRandom.NextInteger">
<summary>
 Samples the distribution and returns a random integer. Returns 
 a normally distributed random number rounded to the nearest integer
</summary>
</member>
<member name="M:ImagePipeline.Extensions.GaussianRandom.Next">
<summary>
 Samples the distribution; returns a random sample from a normal distribution
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:ImagePipeline.Extensions.Bitmap.AddNoise(System.Drawing.Bitmap,System.Double)">
<summary>
 Inserts Gaussian noise into a bitmap.
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Bitmap.AddBorder(System.Drawing.Bitmap,System.Int32)">
<summary>
 Creates an image with a border from this image
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Bitmap.ToGray(System.Drawing.Bitmap)">
<summary>
 Creates a grayscale image from a color image
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:ImagePipeline.Extensions.Extensions.Async.WithResult.Static``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Constructs workflow that triggers the specified event 
 on the GUI thread when the wrapped async completes 
</summary>
</member>
<member name="">

</member>
<member name="M:ImagePipeline.Extensions.Extensions.synchronize``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``1})">
<summary>
 Ensures that the continuation will be called in the same synchronization
 context as where the operation was started
</summary>
</member>
<member name="T:ImagePipeline.Extensions.Extensions">

</member>
<member name="M:ImagePipeline.Extensions.Observable.guard``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},System.IObservable{``0})">
<summary>
 Creates an observable that calls the specified function after someone
 subscribes to it (useful for waiting using &apos;let!&apos; when we need to start
 operation after &apos;let!&apos; attaches handler)
</summary>
</member>
<member name="T:ImagePipeline.Extensions.Observable">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:ImagePipeline.Extensions.Utilities.Trend.Slope">
<summary>
 The change in y per unit of x.
</summary>
</member>
<member name="P:ImagePipeline.Extensions.Utilities.Trend.Intercept">
<summary>
 The value of y when x is zero.
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.Trend.Predict(System.Double)">
<summary>
 Predicts a y value given any x value using the formula y = slope * x + intercept.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:ImagePipeline.Extensions.Utilities.MakeRandomSeed">
 <summary>
 Creates a seed that does not depend on the system clock. A 
 unique value will be created with each invocation.
 </summary>
 <returns>An integer that can be used to seed a random generator</returns>
 <remarks>This method is thread safe.</remarks>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.GaussianInverse(System.Double,System.Double,System.Double)">
 <summary>
 Calculates an approximation of the inverse of the cumulative normal distribution.
 </summary>
 <param name="cumulativeDistribution">The percentile as a fraction (.50 is the fiftieth percentile). 
 Must be greater than 0 and less than 1.</param>
 <param name="mean">The underlying distribution's average (i.e., the value at the 50th percentile) (</param>
 <param name="standardDeviation">The distribution's standard deviation</param>
 <returns>The value whose cumulative normal distribution (given mean and stddev) is the percentile given as an argument.</returns>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.GaussianInverseSimple(System.Double)">
<summary>
 Adaptation of Peter J. Acklam&apos;s Perl implementation. 
 See http://home.online.no/~pjacklam/notes/invnorm/
 This approximation has a relative error of 1.15 × 10−9 or less. 
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.FitImplicit(System.Double[])">
 <summary>
 Linear regression with x-values given implicity by the y-value indices
 </summary>
 <param name="ordinateValues">A series of two or more values</param>
 <returns>A trend line</returns>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.Fit(System.Double[],System.Double[])">
 <summary>
 Linear regression of (x, y) pairs
 </summary>
 <param name="abscissaValues">The x values</param>
 <param name="ordinateValues">The y values corresponding to each x value</param>
 <returns>A trend line that best predicts each (x, y) pair</returns>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.Range(System.Int32)">
<summary>
 Return array of floats for indices 0 .. count-1
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.GetImageFilenames(System.String,System.Int32)">
<summary>
 Repeatedly loop through all of the files in the source directory. This
 enumerable has an infinite number of values.
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.GetImageFilenamesList(System.String,System.Int32)">
 <summary>
 Get names of image files in directory
 </summary>
 <param name="sourceDir">Name of directory</param>
 <param name="maxImages">Maximum number of image file names to return</param>
 <returns>List of image file names in directory (basenames not including directory path)</returns>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.CheckFileExists(System.String)">
<summary>
 Check whether file exists, if not write message and exit immediately.
 (can&apos;t use this method to check whether directory exists)
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.CheckDirectoryExists(System.String)">
<summary>
 Check whether directory exists, if not write message and exit immediately.
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.AsyncDoIoIntensiveOperationSimple(System.Double)">
<summary>
 Simulates an I/O-intensive operation on a single core. The operation will 
 use only a small percent of a single CPU&apos;s cycles however, it will block 
 for the specified number of seconds.

 This is same as &apos;DoIoIntensiveOperationSimple&apos;, but uses F# asyncs to simulate
 non-blocking (asynchronous) I/O typical in F# async applications.
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.AsyncDoIoIntensiveOperation(System.Double,System.Threading.CancellationToken,System.Boolean)">
<summary>
 Simulates an I/O-intensive operation on a single core. The operation will 
 use only a small percent of a single CPU&apos;s cycles however, it will block 
 for the specified number of seconds.

 This is same as &apos;DoIoIntensiveOperation&apos;, but uses F# asyncs to simulate
 non-blocking (asynchronous) I/O typical in F# async applications.
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.DoIoIntensiveOperationSimple(System.Double)">
 <summary>
 Simulates an I/O-intensive operation on a single core. The operation will use only a small percent of a
 single CPU's cycles however, it will block for the specified number of seconds.
 </summary>
 <param name="seconds">The approximate duration of the operation in seconds</param>
 <returns>true if operation completed normally false if the user canceled the operation</returns>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.DoIoIntensiveOperation(System.Double,System.Threading.CancellationToken,System.Boolean)">
 <summary>
 Simulates an I/O-intensive operation on a single core. The operation will use only a small percent of a
 single CPU's cycles however, it will block for the specified number of seconds.
 </summary>
 <param name="seconds">The approximate duration of the operation in seconds</param>
 <param name="token">A token that may signal a request to cancel the operation.</param>
 <param name="throwOnCancel">true if an execption should be thrown in response to a cancellation request.</param>
 <returns>true if operation completed normally false if the user canceled the operation</returns>
</member>
<member name="">

</member>
<member name="M:ImagePipeline.Extensions.Utilities.DoCpuIntensiveOperationSimple(System.Double)">
 <summary>
 Simulates a CPU-intensive operation on a single core. The operation will use approximately 100% of a
 single CPU for a specified duration.
 </summary>
 <param name="seconds">The approximate duration of the operation in seconds</param>
 <returns>true if operation completed normally false if the user canceled the operation</returns>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.DoCpuIntensiveOperation(System.Double,System.Threading.CancellationToken,System.Boolean)">
 <summary>
 Simulates a CPU-intensive operation on a single core. The operation will use approximately 100% of a
 single CPU for a specified duration.
 </summary>
 <param name="seconds">The approximate duration of the operation in seconds</param>
 <param name="token">A token that may signal a request to cancel the operation.</param>
 <param name="throwOnCancel">true if an execption should be thrown in response to a cancellation request.</param>
 <returns>true if operation completed normally false if the user canceled the operation</returns>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.TimedRun``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Executes a function and prints timing results
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.TimedAction``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Executes a function and prints timing results
</summary>
</member>
<member name="M:ImagePipeline.Extensions.Utilities.PrintTime(System.TimeSpan)">
<summary>
 Format and print elapsed time returned by Stopwatch
</summary>
</member>
<member name="">

</member>
<member name="T:ImagePipeline.Extensions.Utilities">

</member>
<member name="T:ImagePipeline.Extensions">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ImagePipeline.Image">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ImagePipeline.Main">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:ImagePipeline.PipelineAgent">

</member>
<member name="F:PipelineImage.Program.checkChanged">
<summary>
 Event that is triggered whenever a radiobutton (any) is checked
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:PipelineImage.Program">
<summary>
 Represents the program and implements GUI interaction
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:PipelineImage">

</member>
</members>
</doc>
